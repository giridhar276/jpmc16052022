


** Everything in python is Object **
**** Every object contains class methods ****


number
--------
number can be integer or decimal or octal or hexa.

val = 10
aval = 34.43


string
---------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "python programming"
cname = """python programming"""


list ( array in C )
----
list contains set of elements.
Elements can be numbers or strings or any combination.
list elements are defined in []

alist = [10,20,30,40,50]
blist = ["python","c",45.43,67]


tuple ( immutable , unchangable , uneditable )
---------------------
tuple contains set of elements.
Elements can be numbers or strings or any combination.
tuple elements are defined in ().
**** Elements inside tuple cant be modified DIRECTLY *****

atup = (10,320,40)
btup = ("python","java",43,3)


dictionary ( json)
-----------
dictionary contains elements in the keys and values.
Indexing is NOT allowed in dictionary

In dictionary:
   key can be either number or string which to used to uniquely identify
   value can be number or string or list or tuple or dictionary or any other complex structure


syntax:  object = {key:value , key:value ... }
example:  book  = {"chap1":10 ,"chap2":20 }
          info  = {1:2,3:4,5:6}
         bookinfo={"chap1":[10,"Rita","US"] ,"chap2":[20,"Rao","UK"] }
          book  = {"chap1":10 ,"chap2":20 ,"chap1":30 }



set
-------------
set is UNORDERED collection of UNIQUE values of the same TYPE.

aset = {10,20,10,50,30,10,40}







commenting in python
-------------------


# this is single line comment




"""
all these lines
are commented
"""











level1
level1
level1
level1
if cond:
    level12
    level2
    level2
    level2
else:
    level2
    level2
    level2



classification of objects
---------------------------

mutable objects
------------------
list
dictionary
set



immutable objects
-----------------
number
string
tuple





function | definition | subroutine | submodule
-----------------------------------------------
- reusability
- defining the code once and calling it for mutliple times



- builtin functions
- user defined functions


builtin functions      ( IN the console...     dir(__builtin__)
---------------------
print()
range()
len()
dir()
help()
type()
input()
sum()
max()
min()
isinstance()
chr()
ord()
open()


typecasting functions
------------------------
int()
str()
float()
oct()
hex()
list()
tuple()
dict()
set()


operators
------------


arithmetic operators :   + - * % /

relational operators :  < <= > >= == !=
-------------------

logical operators :   and or not
------------------
name ='python'
if len(name) == 6  and name.islower():
    # do something


assignment operators  ( ++ and -- are not allowed in python )
-----------------------

val  = 10
val+=1  or  val= val + 1  


special operators
---------------------
in

    
if 'gram' in name:
    print("exists")
else:
    print("doesnt exist")

as


*:

+:




file handling
-----------------

working with flat files (  .txt .log .conf .properties .csv .... )
----------------------------------------------------


- read 
- write
- append



opening the file
-------------------
syntax:   object = open(filename,mode)
example:    fobj = open("customers.txt","r")


            fobj = open("customers.txt","w")
            case1 : if file is not exising , file gets created first
            case2 : if file is already existing, it overwrites the content

            fobj = open("customers.txt","a")
            case1 : if file is not exising , file gets created first
            case2 : if file is already existing, it appends the content to the end of the file


closing the file
------------------
fobj.close()



read operation
------------------

- reading line by line using file object
- fobj.readlines()
- fobj.read()
- using csv library
- using pandas library



exception handling
--------------------

there are 2 types of exceptions

1. syntax error
2. semantic error or runtime error

Handling the exceptions found in the runtime is known as exception handling


try
except
else
finally
raise































working with third party files ( xlsx  docx pdf mp4 ... )
----------------------------------------
all the libraries to work with third party extensions are available from www.pypi.org






function | definition | submodule | subroutine
-------------------------------------------
- resusability



ways of passing parameters
----------------------------

- fixed arguments
- default arguments
- keyword arguments
- variable length arguments  






library | package | module
------------------------


- builtin libraries
--------------------
All the builtin libraries which are generally used( math operations , system level operaitons , emailing, string handling , ftp operations , multi processsing , extracing ....) are available with python by default.


- third party libraries
----------------------
Depending on the requirement( cloud , data analytics , Machine learning , image processing , networking , database programming ) developer has to install the third party package 

- pip tool
- conda tool  ( comes with anaconda-python)
- download and install manually from www.pypi.org



pip install <libraryname>
easy_install <libraryname>































display all existing databases
-----------------------------
show databases ;

create your database
--------------------
create database jpmc ;

access your database
---------------------
use jpmc ;

create table 
---------------
create table realestate ( street varchar(100) , city varchar(100) ) ;

inserting records
-------------------
insert into realestate values('Hitechcity','Hyderabad');
insert into realestate values('MG Road','delhi');

display all the records
-----------------------
select * from realestate;








programming
--------------

- procedural programming  ( top down approach )

- object oriented programming
-----------------------------------
- reusability



object oriented programming  - principles
-----------------------------------------
- common across all the object oriented languages.

- class object
- encapsulation
- Inheritance
- polymorphism
  -> function overloading
  -> operator overloading






class
------
class is something like blueprint of the house.
class contains data members(variables) and member functions.

object
--------
object is the instance of the class.


self
-----
self is instance of the object































builtin libraries which are generally used
----------------------------------------
sys           : system python config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml        
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files
re            : validating the strings
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing:
subprocess    : invoking the system commands ( linux or dos commands)



frequently used third party libraries
---------------------------------------
database related
----------------
pymysql   :
cx_Oracle
pymongo
pymssql

web frameworks ( developing web applications)
--------------
django
flask
bottom

analytics/machine learning
---------------------------
numpy
scipy
pandas
seaborn
plotly
ggplot
matplotlib   : visualizing data .. bar graph.. pie graph
scikit-learn :  machine learning algorithms

image processing
---------------
pillow
opencv
pytorch


APIs ( REST API)
-----
requests

excel programming
------------------
openpyxl    : reading/write excel files
xlsxwriter  : writing to excel file
python-docx : working with ms-word
pandas

networking
-----------
paramiko   :  interacting with remote servers
netmiko    :  connecting to router/switch
pyping     :  ping any host or ip address
















pandas
-------
-csv
-xlsx
-html
-web
-json
-hdf
-db



python
---------
number string list tuple dictionary set


pandas
------
-series    ( 1-D )
-dataframe ( 2-D)





hello.py

hello.ipynb







re
---
-search anywhere in the string
-match at the beginning
-subs
-findall
-split


wildcard characters or metacharacters
-----------------------------------------

^  : at the beginning 
     if re.search("^python",line):

$ : at the end of the string
    if re.search("python$",line):

* :  zero or more occurences of the preceding character
     if re.search("pyt*hon",line):

.  : any single character

+ : one or more occurence of hte preceding character
     if re.search("pyt+hon",line):

? : either zero of once occurence of the preceding character
     if re.search("pyt?hon",line):

[] : character class
     if re.search("[qmrt]ython",line):
     qython  or mython  or rython or tython

() ; (match1|match2|match3)
     (python|unix)
     if re.search("python$|unix",line):

{} : { min,max} occurences of the preceding character
     if re.search("pyt{2,}hon",line):

\d : digit
\w : word boundary
\s : space





































